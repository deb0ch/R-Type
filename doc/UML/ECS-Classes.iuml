@startuml

title ECS - Class Diagram

package ECS {

Interface IComponent {
    +{abstract} const std::string&	getType() const
    +{abstract} *IComponent	clone() const
    +{abstract} void	deserializeFromFile(std::ifstream &input, unsigned int &lineno)
    +{abstract} void	serializeFromFile(std::ofstream &output, unsigned char indent) const
}

Abstract Class AComponent {
    #std::string _type  

    +AComponent(const std::string &type)

    +const std::string&	getType() const
    +void		deserializeFromFile(std::ifstream &input, unsigned int &lineno)
    +void		deserializeFromFileSpecial(const std::string &, std::ifstream &, unsigned int&)
    +void		serializeFromFile(std::ofstream &, unsigned char) const
}

Interface ISystem {
    +{abstract}unsigned int	getPriority() const
    +{abstract}const std::string&	getType() const
    +{abstract}void	setWorld(World *)
    +{abstract}void	process(std::vector<Entity *>&, const float delta)
    +{abstract}void	init()
    +{abstract}void	start()
    +{abstract}void	pause()
    +{abstract}void	resume()
    +{abstract}void	stop()
}

Abstract class ASystem {
  #{static}static const int _default_priority = 20

  #std::string _type
  #unsigned int _priority
  #World *_world

  #{abstract}bool	canProcess(Entity *) const
  #{abstract}void	processEntity(Entity *, const float delta)
  #void			sortEntities(std::vector<Entity *>&) const
  #void			beforeProcess(const float)
  #void			afterProcess(const float)

  +ASystem(const std::string &type, unsigned int priority = _default_priority)
  
  +const std::string&	getType() const
  +unsigned int		getPriority() const
  +void			setWorld(World *)
  +void			process(std::vector<Entity *>&, const float delta)
  +void			init()
  +void			start()
  +void			pause()
  +void			resume()
  +void			stop()
}

Class World {
    +{static}bool DEBUG
    +{static}bool QUADTREE

    -std::vector<Entity*> _entities
    -std::vector<ISystem*> _systems
    -std::map<std::string, Any> _shared_objs
    -unsigned int _nextEntityID
    -EventManager<ISystem> _event_manager
    -bool _initialized
    -bool _running

    +World()
    
    +void		exit()
    +bool		isRunning() const
    +Entity*		createEntity()
    +World*		addEntity(Entity *)
    +World*		addSystem(ISystem *)
    +World*		removeEntity(Entity *)
    +World*		removeEntity(unsigned int id)
    +World*		removeSystem(ISystem *)
    +World*		removeSystem(const std::string &type)
    +ISystem*		getSystem(const std::string &type) const
    +T*			getSystem(const std::string &type) const
    +World*		addEventHandler(const std::string &type, ISystem *obj, void (T::handler)(IEvent *)
    +bool		hasEventHandler(const std::string &type) const
    +void		sendEvent(IEvent *event)
    +std::vector<Entity *>&	getEntities()
    +const std::vector<Entity *>&	getEntities() const
    +int		countEntities() const
    +Entity		*getEntity(const unsigned int id) const
    +void		process(const float delta)
    +void		init()
    +void		start()
    +void		voidpause()
    +void		resume()
    +void		stop()
    +void		setSharedObject(const std::string &type, T *obj)
    +T*			getSharedObject(const std::string &type)
}

Interface IEvent {
    +{abstract}const std::string&	getType() const
}

Abstract Class AEvent {
    #std::string _type

    +AEvent(const std::string &type)
    
    +const std::string&	getType() const
}

Class Hash {
    +hash_t		operator()(const std::string &) const
}

Interface IContainer {

    +{abstract}IContainer *clone() const 
}

Class Container {
    +T *_value
    
    +Container(T *value)
    
    +IContainer *clone() const
}

Class Any {
    #IContainer *_container

    +Any(T *value)

    +const T*		getValue() const
    +T*			getValue()
    +Any&		operator=(T *value)
}

Class VectorDeleter {
    +bool		operator()(T pointer)
}

Class EventManager {
    #std::map<std::string, std::vector<std::pair<T *, void (T::*)(IEvent *)> > > _event_handlers

    +bool		hasHandler(const std::string &type) const
    +void		addHandler(const std::string &type, T *obj, void (T::*e)(IEvent *))
    +void		sendEvent(IEvent *event)
}

Class ECSException {
    -std::string		_info

    +ECSException(const int error)
    +ECSException(const std::string &error)
    +ECSException(const std::string &prefix, const int error)
    +ECSException(const std::string &prefix, const std::string &error)

    +const char*	what() const throw()
    -void		addError(const int error)
}

Class Entity {
    +unsigned int _id
    +std::vector<IComponent*> _components

    +Entity*		addComponent(IComponent *)
    +Entity*		removeComponent(IComponent *)
    +Entity*		removeComponent(const std::string &id)
    +Entity*		removeAllComponent()
    +Entity*		removeAllComponentExcept(const IComponent *)
    +Entity*		removeAllComponentExcept(const std::string &id)
    +bool		hasComponent(const std::string &string_type) const
    +IComponent*	getComponent(const std::string &string_type) const
    +IComponent*	getComponent(const T &value, const U &hash) const
    +T*			getComponent(const std::string &string_type) const
    +X*			getComponent(const T &value, const U &hash) const
    +unsigned int	getId() const
    +Entity*		clone() const
}

}

@enduml