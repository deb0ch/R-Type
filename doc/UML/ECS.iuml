@startuml

title ECS - Class Diagram

Interface IComponent {
    +{abstract} getType() const         : const std::string&
    +{abstract} clone() const           : *IComponent
    +{abstract} deserializeFromFile(std::ifstream &input, unsigned int &lineno) : void
    +{abstract} serializeFromFile(std::ofstream &output, unsigned char indent) const : void
}



Abstract Class AComponent {
    #std::string _type;  

    +AComponent(const std::string &type)

    +getType() const : const std::string&
    +deserializeFromFile(std::ifstream &input, unsigned int &lineno) : void
    +deserializeFromFileSpecial(const std::string &, std::ifstream &, unsigned int&) : void
    +serializeFromFile(std::ofstream &, unsigned char) const : void
}

Interface ISystem {
    +{abstract}getPriority() const : unsigned int;
    +{abstract}getType() const : const std::string&;
    +{abstract}setWorld(World *) : void;
    +{abstract}process(std::vector<Entity *>&, const float delta) : void;
    +{abstract}init() : void;
    +{abstract}start() : void;
    +{abstract}pause() : void;
    +{abstract}resume() : void;
    +{abstract}stop() : void;
}

Abstract class ASystem {
  #{static}static const int _default_priority = 20;

  #std::string _type;
  #unsigned int _priority;
  #World *_world;

  #{abstract}canProcess(Entity *) const : bool
  #{abstract}processEntity(Entity *, const float delta) : void
  #sortEntities(std::vector<Entity *>&) const : void
  #beforeProcess(const float) : void
  #afterProcess(const float) : void

  +ASystem(const std::string &type, unsigned int priority = _default_priority)
  
  +&getType() const : const std::string&
  +getPriority() const : unsigned int
  +setWorld(World *);
  +process(std::vector<Entity *>&, const float delta);
  +init() : void
  +start() : void
  +pause() : void
  +resume() : void
  +stop() : void
}

Class World {
    +{static}bool DEBUG;
    +{static}bool QUADTREE;

    -std::vector<Entity*> _entities
    -std::vector<ISystem*> _systems
    -std::map<std::string, Any> _shared_objs
    -unsigned int _nextEntityID
    -EventManager<ISystem> _event_manager
    -bool _initialized
    -bool _running

    +World();
    
    +exit() : void
    +isRunning() const; : bool
    +createEntity(); : Entity*
    +addEntity(Entity *); : World*
    +addSystem(ISystem *); : World*
    +removeEntity(Entity *); : World*
    +removeEntity(unsigned int id); : World*
    +removeSystem(ISystem *); : World*
    +removeSystem(const std::string &type); : World*
    +getSystem(const std::string &type) const; : ISystem*
    +getSystem(const std::string &type) const : T*
    +addEventHandler(const std::string &type, ISystem *obj, void (T::handler)(IEvent *) : World*
    +hasEventHandler(const std::string &type) const; : bool
    +sendEvent(IEvent *event); : void
    +getEntities() : std::vector<Entity *>&
    +getEntities() const : const std::vector<Entity *>&
    +countEntities() const; : int
    +Entity	*getEntity(const unsigned int id) const : Entity*
    +process(const float delta); : void
    +init(); : void
    +start(); : void
    +pause(); : void
    +resume(); : void
    +stop(); : void
    +setSharedObject(const std::string &type, T *obj) : void
    +getSharedObject(const std::string &type) : T*
}

Interface IEvent {
    +{abstract}getType() const : const std::string&
}

Abstract Class AEvent {
    #std::string _type;

    +AEvent(const std::string &type)
    
    +getType() const : const std::string&
}

Class Hash {
    +operator()(const std::string &) const : hash_t
}

Interface IContainer {

    +{abstract}virtual IContainer *clone() const ;
}

Class Container {
    +T *_value;
    
    +Container(T *value)
    
    +IContainer *clone() const
}

Class Any {
    #IContainer *_container;

    +Any(T *value)

    +getValue() const : const T*
    +getValue() : T*
    +operator=(T *value) : Any&
}

Class VectorDeleter {
    +operator()(T pointer) : void
}

Class EventManager {
    #std::map<std::string, std::vector<std::pair<T *, void (T::*)(IEvent *)> > > _event_handlers;

    +hasHandler(const std::string &type) const : bool
    +addHandler(const std::string &type, T *obj, void (T::*e)(IEvent *)) : void
    +sendEvent(IEvent *event) : void
}

Class ECSException {
    -std::string		_info;

    +ECSException(const int error);
    +ECSException(const std::string &error);
    +ECSException(const std::string &prefix, const int error);
    +ECSException(const std::string &prefix, const std::string &error);

    +what() const throw() : const char*
    -addError(const int error) : void
}

Class Entity {
    +unsigned int _id;
    +std::vector<IComponent*> _components;

    +addComponent(IComponent *); : Entity*
    +removeComponent(IComponent *); : Entity*
    +removeComponent(const std::string &id); : Entity*
    +removeAllComponent(); : Entity*
    +removeAllComponentExcept(const IComponent *); : Entity*
    +removeAllComponentExcept(const std::string &id); : Entity*
    +hasComponent(const std::string &string_type) const; : bool
    +getComponent(const std::string &string_type) const; : IComponent*
    +getComponent(const T &value, const U &hash) const : IComponent*
    +getComponent(const std::string &string_type) const : T*
    +getComponent(const T &value, const U &hash) const : X*
    +getId() const; : unsigned int
    +clone() const; : Entity*
}

@enduml